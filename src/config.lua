---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kira1101.
--- DateTime: 2020/9/25 下午 09:23
---


local AceConfig = LibStub("AceConfig-3.0")
local L = LibStub("AceLocale-3.0"):GetLocale("PlateEnhancement")
local media = LibStub("LibSharedMedia-3.0")

local mainOption
local function getClassOption()
    mainOption = {
        type = "group",
        childGroups = "tab",
        name = L["option"],
        args = {
            iconOption = {
                order = 1,
                type = "group",
                name = L["general"],

                args = {
                    column = {
                        order = 1,
                        name = L["icons"],
                        type = "group",
                        args ={
                            font = {
                                order = 1,
                                type = "select",
                                style = "dropdown",
                                name = L["font"],
                                values = media:List("font"),
                                itemControl = "DDI-Font",
                                get = function(info)
                                    for i, v in next, media:List("font") do
                                        if v == aceDB.char.font then return i end
                                    end
                                end,
                                set = function(info,key)
                                    local list = media:List("font")
                                    local font = list[key]
                                    aceDB.char.font = font

                                    adjustmentFont()
                                end,
                            },
                            iconSize = {
                                order = 2,
                                type = "range",
                                name = L["iconSize"],
                                min = 12,
                                max = 30,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.iconSize
                                end,
                                set = function(info, val)
                                    aceDB.char.iconSize = val
                                    adjustmentIconSize()
                                end,
                            },

                            fontSize = {
                                order = 3,
                                type = "range",
                                name = L["fontSize"],
                                min = 6,
                                max = 14,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.fontSize
                                end,
                                set = function(info, val)
                                    aceDB.char.fontSize = val
                                    adjustmentFont()
                                end,
                            },
                            iconSpacing = {
                                order = 4,
                                type = "range",
                                name = L["iconSpacing"],
                                min = 0,
                                max = 6,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.iconSpacing
                                end,
                                set = function(info, val)
                                    aceDB.char.iconSpacing = val
                                    adjustmentIconSpacing()
                                end,
                            },
                            XOffset = {
                                order = 5,
                                type = "range",
                                name = L["X offset"],
                                min = -20,
                                max = 20,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.XOffset
                                end,
                                set = function(info, val)
                                    aceDB.char.XOffset = val
                                    setXOffset(val)
                                end,
                            },
                            YOffset = {
                                order = 5,
                                type = "range",
                                name = L["Y offset"],
                                min = -20,
                                max = 20,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.YOffset
                                end,
                                set = function(info, val)
                                    aceDB.char.YOffset = val
                                    setYOffset(val)
                                end,
                            },
                            countFont = {
                                order = 6,
                                type = "select",
                                style = "dropdown",
                                name = L["count font"],
                                values = media:List("font"),
                                itemControl = "DDI-Font",
                                get = function(info)
                                    for i, v in next, media:List("font") do
                                        if v == aceDB.char.countFont then return i end
                                    end
                                end,
                                set = function(info,key)
                                    local list = media:List("font")
                                    local font = list[key]
                                    aceDB.char.countFont = font
                                    adjustmentCountFont()
                                end,
                            },
                            countFontSize = {
                                order = 7,
                                type = "range",
                                name = L["count font size"],
                                min = 4,
                                max = 18,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.countFontSize
                                end,
                                set = function(info, val)
                                    aceDB.char.countFontSize = val
                                    adjustmentCountFont()
                                end,
                            },
                        },

                    }
                }

            },

            BuffOption = {
                order = 2,
                type = "group",
                name = L["Buffs"],

                args = {
                    Warrior = {
                        order = 1,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_warrior", GetClassInfo(1)) end,
                        args = {}
                    },
                    Paladin= {
                        order = 2,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_paladin", GetClassInfo(2)) end,
                        args = {}
                    },
                    Hunter = {
                        order = 3,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_hunter", GetClassInfo(3)) end,
                        args = {
                        }
                    },
                    Rogue = {
                        order = 4,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_rogue", GetClassInfo(4)) end,
                        args = {}
                    },
                    Priest = {
                        order = 5,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_priest", GetClassInfo(5)) end,
                        args = {}
                    },
                    DeathKnight = {
                        order = 6,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_deathknight", GetClassInfo(6)) end,
                        args = {}
                    },
                    Shaman = {
                        order = 7,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_shaman", GetClassInfo(7)) end,
                        args = {}
                    },
                    Mage = {
                        order = 8,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_mage", GetClassInfo(8)) end,
                        args = {}
                    },
                    Warlock = {
                        order = 9,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_warlock", GetClassInfo(9)) end,
                        args = {}
                    },
                    Monk = {
                        order = 10,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_monk", GetClassInfo(10)) end,
                        args = {}
                    },
                    Druid = {
                        order = 11,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_druid", GetClassInfo(11)) end,
                        args = {}
                    },
                    DemonHunter = {
                        order = 12,
                        type = "group",
                        name = function() return format("|T%s:16|t %s", "Interface\\ICONS\\Classicon_demonhunter", GetClassInfo(12)) end,
                        args = {}
                    },
                }
            },
            DebuffOption = {
                order = 3,
                type = "group",
                name = L["Debuffs"],

                args = {

                }

            },
        }
    }

end

local options
local function getOptions()
    if not options then
        options = {
            type = "group",
            name = L["Plate Enhancement"],
            args = {
                mainOption = mainOption
            }
        }
    end

    return options
end


local function SetupOptions()
    optionsFrames = {}
    getClassOption()

    LibStub("AceConfigRegistry-3.0"):RegisterOptionsTable("Plate Enhancement", getOptions)
    optionsFrames.PlateEnhancement = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("Plate Enhancement", L["Plate Enhancement"], nil,"mainOption")
end

local function insertClassSpells(classname,spellTable)
    for i,k in ipairs(spellTable) do
        mainOption.args.BuffOption.args[classname].args[tostring(i)] ={
            type = "toggle",
            name = function() return format("|T%s:16|t %s", GetSpellTexture(k), GetSpellInfo(k)) end,
            desc = GetSpellDescription(k),
            get = function(info)
                return aceDB.char.enabledSpell[k]
            end,
            set = function(info, val)
                aceDB.char.enabledSpell[k] = val
            end,
        }

    end
end

media:Register("font","BIG_BOLD",[[Interface\AddOns\PlateEnhancement\font\BIG_BOLD.TTF]],255 )
SetupOptions()

insertClassSpells("Warrior",WarriorSpells)
insertClassSpells("Paladin",PaladinSpells)
insertClassSpells("Hunter",HunterSpells)
insertClassSpells("Rogue",RogueSpells)
insertClassSpells("Priest",PriestSpells)
insertClassSpells("DeathKnight",DeathKnightSpells)
insertClassSpells("Shaman",ShamanSpells)
insertClassSpells("Mage",MageSpells)
insertClassSpells("Warlock",WarlockSpells)
insertClassSpells("Monk",MonkSpells)
insertClassSpells("Druid",DruidSpells)
insertClassSpells("DemonHunter",DemonHunterSpells)




--local function addOption()
--    local panel = CreateFrame("FRAME")
--    panel.name = "Plate Enhancement"
--    InterfaceOptions_AddCategory(panel)
--
--    local classPanel = CreateFrame("Frame",nil,panel)
--    classPanel.name = "class"
--    classPanel.parent = panel.name
--    InterfaceOptions_AddCategory(classPanel)
--
--end
--
--addOption()


--local DemonHunterSpell = {188501,258920}
--local DemonHunterSpellDict = {}
--for _,k in ipairs(DemonHunterSpell) do
--    DemonHunterSpellDict[k] = GetSpellInfo(k)
--end