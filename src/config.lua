---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kira1101.
--- DateTime: 2020/9/25 下午 09:23
---


local AceConfig = LibStub("AceConfig-3.0")
local L = LibStub("AceLocale-3.0"):GetLocale("PersonalBuff")
local media = LibStub("LibSharedMedia-3.0")

local mainOption,options


local function getClassOption()
    mainOption = {
        type = "group",
        childGroups = "tab",
        name = L["option"],
        args = {
            iconOption = {
                order = 1,
                type = "group",
                name = L["general"],

                args = {
                    personalBar = {
                        order = 1,
                        name = L["personal bar"],
                        type = "group",
                        args ={
                            personalBar =  {
                                order = 1,
                                type = "header",
                                name = L["personal bar"],
                            },
                            setDefault =  {
                                order = 3,
                                type = "execute",
                                name = L["default"],

                                func = function()
                                    SetCVar ("nameplateSelfTopInset", 0.50)
                                    SetCVar ("nameplateSelfBottomInset", 0.20)
                                end,

                            },
                            personalBarAnchor =  {
                                order = 2,
                                type = "range",
                                name = L["personalBarAnchor"],
                                min = 20,
                                max = 70,
                                step = 1,
                                get = function()
                                    return tonumber (100 - GetCVar ("nameplateSelfTopInset")*100)
                                end,
                                set = function(info, val)
                                    SetCVar ("nameplateSelfBottomInset", val / 100)
                                    SetCVar ("nameplateSelfTopInset", abs (val - 100) / 100)
                                end,
                            },
                            customTexture = {
                                order = 4,
                                type = "toggle",
                                name = L["customTexture"],
                                confirm = function(info, v)
                                    if not v then
                                        return L["Disabling the texture will make them reset next time you reload, are you sure?"]
                                    end
                                end ,
                                get = function(info)
                                    return aceDB.char.customTexture
                                end,
                                set = function(info, val)
                                    aceDB.char.customTexture = val
                                end,
                            },
                            barTexture = {
                                order = 5,
                                type = "select",
                                style = "dropdown",
                                name = L["personalBarTexture"],
                                values = media:List("statusbar"),
                                itemControl = "DDI-Statusbar",
                                disabled = function ()
                                    return not(aceDB.char.customTexture)
                                end,
                                get = function(info)
                                    for i, v in next, media:List("statusbar") do
                                        if v == aceDB.char.barTexture then return i end
                                    end
                                end,
                                set = function(info,key)
                                    local list = media:List("statusbar")
                                    local texture = list[key]
                                    aceDB.char.barTexture = texture
                                end,
                            },

                            changeHealthBarColor = {
                                order = 6,
                                type = "toggle",
                                name = L["change health bar Color by class color"],
                                confirm = function(info, v)
                                    if not v then
                                        return L["Reset the health bar color next time you reload"]
                                    end
                                end ,
                                get = function(info)
                                    return aceDB.char.changeHealthBarColor
                                end,
                                set = function(info, val)
                                    aceDB.char.changeHealthBarColor = val
                                end,
                            },
							alwayshow = {
							order = 7,
                                type = "toggle",
                                name = L["alway show"],
                                
                                get = function(info)
									if GetCVar("NameplatepersonalShowAlways")== "0" then
										return false
									else
									
										return true
									end
                                end,
                                set = function(info, val)
									if val == false then
										SetCVar("NameplatepersonalShowAlways","0")
									else
										SetCVar("NameplatepersonalShowAlways","1")
									end
									
                                end,
							},
                        },

                    },
                    column = {
                        order = 2,
                        name = L["icons"],
                        type = "group",
                        args ={
                            iconHeader =  {
                                order = 0,
                                type = "header",
                                name = L["icon"],
                            },
                            font = {
                                order = 1,
                                type = "select",
                                style = "dropdown",
                                name = L["font"],
                                values = media:List("font"),
                                itemControl = "DDI-Font",
                                get = function(info)
                                    for i, v in next, media:List("font") do
                                        if v == aceDB.char.font then return i end
                                    end
                                end,
                                set = function(info,key)
                                    local list = media:List("font")
                                    local font = list[key]
                                    aceDB.char.font = font

                                    adjustmentFont()
                                end,
                            },
                            iconSize = {
                                order = 2,
                                type = "range",
                                name = L["iconSize"],
                                min = 12,
                                max = 45,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.iconSize
                                end,
                                set = function(info, val)
                                    aceDB.char.iconSize = val
                                    adjustmentIconSize()
                                end,
                            },

                            fontSize = {
                                order = 3,
                                type = "range",
                                name = L["fontSize"],
                                min = 6,
                                max = 14,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.fontSize
                                end,
                                set = function(info, val)
                                    aceDB.char.fontSize = val
                                    adjustmentFont()
                                end,
                            },
                            iconSpacing = {
                                order = 4,
                                type = "range",
                                name = L["iconSpacing"],
                                min = -10,
                                max = 10,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.iconSpacing
                                end,
                                set = function(info, val)
                                    aceDB.char.iconSpacing = val
                                    adjustmentIconSpacing()
                                end,
                            },
                            XOffset = {
                                order = 5,
                                type = "range",
                                name = L["X offset"],
                                min = -50,
                                max = 50,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.XOffset
                                end,
                                set = function(info, val)
                                    aceDB.char.XOffset = val
                                    setXOffset()
                                end,
                            },
                            YOffset = {
                                order = 5,
                                type = "range",
                                name = L["Y offset"],
                                min = -50,
                                max = 50,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.YOffset
                                end,
                                set = function(info, val)
                                    aceDB.char.YOffset = val
                                    setYOffset()
                                end,
                            },
                            countFont = {
                                order = 6,
                                type = "select",
                                style = "dropdown",
                                name = L["count font"],
                                values = media:List("font"),
                                itemControl = "DDI-Font",
                                get = function(info)
                                    for i, v in next, media:List("font") do
                                        if v == aceDB.char.countFont then return i end
                                    end
                                end,
                                set = function(info,key)
                                    local list = media:List("font")
                                    local font = list[key]
                                    aceDB.char.countFont = font
                                    adjustmentCountFont()
                                end,
                            },
                            countFontSize = {
                                order = 7,
                                type = "range",
                                name = L["count font size"],
                                min = 4,
                                max = 18,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.countFontSize
                                end,
                                set = function(info, val)
                                    aceDB.char.countFontSize = val
                                    adjustmentCountFont()
                                end,
                            },
                        },

                    },
                    resourceNumber = {
                        order = 3,
                        name = L["Resource Number"],
                        type = "group",
                        args ={
                            show = {
                                order = 1,
                                type = "toggle",
                                name = L["Show"],

                                get = function(info)
                                    return aceDB.char.resourceNumber
                                end,
                                set = function(info, val)
                                    aceDB.char.resourceNumber = val
                                end,
                            },
                            header =  {
                                order = 2,
                                type = "header",
                                name = "",
                            },
                            font = {
                                order = 3,
                                type = "select",
                                style = "dropdown",
                                name = L["font"],
                                values = media:List("font"),
                                itemControl = "DDI-Font",
                                get = function(info)
                                    for i, v in next, media:List("font") do
                                        if v == aceDB.char.resourceFont then return i end
                                    end
                                end,
                                set = function(info,key)
                                    local list = media:List("font")
                                    local font = list[key]
                                    aceDB.char.resourceFont = font
                                end,
                                disabled = function()
                                    return not aceDB.char.resourceNumber
                                end,
                            },
                            size = {
                                order = 4,
                                type = "range",
                                name = L["fontSize"],
                                min = 6,
                                max = 14,
                                step = 1,
                                get = function(info)
                                    return aceDB.char.resourceFontSize
                                end,
                                set = function(info, val)
                                    aceDB.char.resourceFontSize = val
                                end,
                                disabled = function()
                                    return not aceDB.char.resourceNumber
                                end,
                            },
                            alignment = {
                                order = 5,
                                type = "select",
                                style = "dropdown",
                                name = L["alignment"],
                                values = {
                                    LEFT = L["left"],
                                    CENTER = L["center"],
                                    RIGHT = L["right"],
                                },
                                get = function(info)
                                    return aceDB.char.resourceAlignment
                                end,
                                set = function(info, val)
                                    aceDB.char.resourceAlignment = val
                                end,
                                disabled = function()
                                    return not aceDB.char.resourceNumber
                                end,
                            },
                            type = {
                                order = 6,
                                type = "select",
                                style = "dropdown",
                                name = L["Type"],
                                values = {
                                    Numerical = L["Numerical"],
                                    Percent = L["Percent"],
                                    Both = L["Both"],
                                },
                                get = function(info)
                                    return aceDB.char.resourceNumberType
                                end,
                                set = function(info, val)
                                    aceDB.char.resourceNumberType = val
                                end,
                                disabled = function()
                                    return not aceDB.char.resourceNumber
                                end,
                            },

                        }
                    }
                }

            },

            BuffOption = {
                order = 2,
                type = "group",
                name = L["Buffs"],

                args = {

                }
            },
            --DebuffOption = {
            --    order = 3,
            --    type = "group",
            --    name = L["Debuffs"],
            --
            --    args = {
            --
            --    }
            --
            --},
        }
    }

end


local function getOptions()
    if not options then
        options = {
            type = "group",
            name = L["Personal Buff"],
            args = {
                mainOption = mainOption
            }
        }
    end

    return options
end


local function SetupOptions()
    optionsFrames = {}
    getClassOption()

    LibStub("AceConfigRegistry-3.0"):RegisterOptionsTable("Personal Buff", getOptions)
    optionsFrames.PersonalBuff = LibStub("AceConfigDialog-3.0"):AddToBlizOptions("Personal Buff", L["Personal Buff"], nil,"mainOption")
end
local function searchBuff()
    print("search")
end
local function insertClassSpells(classname,spellTable)
    mainOption.args.BuffOption.args[classname].args[tostring(0)] = {
        type = "header",
        order = 0,
        name = classname,
    }
    if classname == "Custom" then
    --    mainOption.args.BuffOption.args[classname].args[tostring(1)] = {
    --        type = "input",
    --        order = 1,
    --        name = "",
    --        width = "double",
    --    }
    --    mainOption.args.BuffOption.args[classname].args[tostring(2)] = {
    --        type = "execute",
    --        order = 2,
    --        name = "search",
    --        width = "half",
    --        func = searchBuff,
    --    }
    --    mainOption.args.BuffOption.args[classname].args[tostring(3)] = {
    --        type = "execute",
    --        order = 3,
    --        name = "new",
    --        width = "half",
    --    }
        mainOption.args.BuffOption.args[classname].args[tostring(2)] = {
            type = "toggle",
            order = 3,
            name = "auto detect",
            get = function(info)
                return aceDB.char.autoDetect
            end,
            set = function(info, val)
                setAutoDetect(val)
                aceDB.char.autoDetect = val
            end,
        }
        mainOption.args.BuffOption.args[classname].args[tostring(3)] = {
            type = "execute",
            name = L["default"],
            order = 4,
            func = function()
                aceDB.char.customSpell = {}
                aceDB.char.CustomSpell = {}
            end,
        }
        mainOption.args.BuffOption.args[classname].args[tostring(4)] = {
            type = "header",
            order = 5,
            name = "",
        }
    end
    for i,k in ipairs(spellTable) do
        mainOption.args.BuffOption.args[classname].args[tostring(((i + 2) * 2 ) - 1)] = {
            type = "toggle",
            order = ((i + 1) * 2 ) ,
            name = function() return format("|T%s:16|t %s", GetSpellTexture(k), GetSpellInfo(k)) end,
            desc = string.format("%s \nid : %d",GetSpellDescription(k),k),
            get = function(info)
                --return aceDB.char.enabledSpell[k]

                return aceDB.char.spell[k][1]
            end,
            set = function(info, val)
                --aceDB.char.enabledSpell[k] = val
                checkEnableSpell(k,val)
                addCustomIcon(k)

                aceDB.char.spell[k][1] = val
            end,
        }
        mainOption.args.BuffOption.args[classname].args[tostring(((i + 2) * 2 ))] = {
            order = ((i + 1) * 2 ) + 1,
            type = "range",
            name = L["Priority"] ,
            desc = L["The higher the rank ordering more left"],
            max = 15,
            min = -15,
            step = 1,
            get = function(info)
                --return aceDB.char.spellRank[k]
                  return aceDB.char.spell[k][2]
            end,
            set = function(info, val)
                --aceDB.char.spellRank[k] = val
                aceDB.char.spell[k][2] = val
            end,
        }

    end
end

function insertSpellsSort()
    local _,_,ID = UnitClass("player")
    local classSpells
    if ID == 1 then
        classSpells = WarriorSpells
    elseif ID == 2 then
        classSpells = PaladinSpells
    elseif ID == 3 then
        classSpells = HunterSpells
    elseif ID == 4 then
        classSpells = RogueSpells
    elseif ID == 5 then
        classSpells = PriestSpells
    elseif ID == 6 then
        classSpells = DeathKnightSpells
    elseif ID == 7 then
        classSpells = ShamanSpells
    elseif ID == 8 then
        classSpells = MageSpells
    elseif ID == 9 then
        classSpells = WarlockSpells
    elseif ID == 10 then
        classSpells = MonkSpells
    elseif ID == 11 then
        classSpells = DruidSpells
    elseif ID == 12 then
        classSpells = DemonHunterSpells
    end
    local index = 1
    for i,k in ipairs(classSpells) do
        mainOption.args.iconOption.args.sort.args[tostring(i)] = {
            order = i,
            type = "range",
            name = function() return format("|T%s:16|t %s", GetSpellTexture(k), GetSpellInfo(k)) end,
            desc = L["The higher the rank ordering more left"],
            max = 15,
            min = -15,
            step = 1,
            get = function(info)
                return aceDB.char.spellRank[k]
            end,
            set = function(info, val)
                aceDB.char.spellRank[k] = val
            end,
        }
        index = index + 1
    end
    for i,k in ipairs(aceDB.char.customSpell) do
        mainOption.args.iconOption.args.sort.args[tostring(index)] = {
            order = index,
            type = "range",
            name = function() return format("|T%s:16|t %s", GetSpellTexture(k), GetSpellInfo(k)) end,
            desc = L["The higher the rank ordering more left"],
            max = 15,
            min = -15,
            step = 1,
            get = function(info)
                return aceDB.char.spellRank[k]
            end,
            set = function(info, val)
                aceDB.char.spellRank[k] = val
            end,
        }
        index = index + 1
    end
    for i,k in ipairs(CommonSpells) do
        mainOption.args.iconOption.args.sort.args[tostring(index)] = {
            order = index,
            type = "range",
            name = function() return format("|T%s:16|t %s", GetSpellTexture(k), GetSpellInfo(k)) end,
            desc = L["The higher the rank ordering more left"],
            max = 15,
            min = -15,
            step = 1,
            get = function(info)
                return aceDB.char.spellRank[k]
            end,
            set = function(info, val)
                aceDB.char.spellRank[k] = val
            end,
        }
        index = index + 1
    end
    mainOption.args.iconOption.args.sort.args[tostring(index)] = {
        order = -1,
        type = "range",
        name = function() return format("|T%s:16|t %s", GetSpellTexture(2825), GetSpellInfo(2825)) end,
        desc = L["The higher the rank ordering more left"],
        max = 15,
        min = -15,
        step = 1,
        get = function(info)
            return aceDB.char.spellRank[2825]
        end,
        set = function(info, val)
            aceDB.char.spellRank[32182] = val
            aceDB.char.spellRank[2825] = val
            aceDB.char.spellRank[80353] = val
            aceDB.char.spellRank[264667] = val
            aceDB.char.spellRank[178207] = val
            aceDB.char.spellRank[230935] = val
            aceDB.char.spellRank[256740] = val
            aceDB.char.spellRank[292686] = val
            aceDB.char.spellRank[340880] = val
        end,
    }
end

function setDefaultCustomSpell()
    mainOption.args.BuffOption.args.customSpell.args = {
        description = {
            order = 0,
            type = "description",
            name = "Enter the spell 'ID'",
            width = "full"
        },
        input = {
            order = 1,
            type = "input",
            name = "",
            width = "full",
            set = function (info, v)
                table.insert(aceDB.char.customSpell,tonumber(v))
                --addCustomSpell()
                resetBuffFrame()
            end,
            validate = function(info, v)
                local check = true
                for i,k in ipairs(aceDB.char.customSpell) do
                    if k == tonumber(v) then
                        check = false
                    end
                end

                if GetSpellInfo(v) == nil then
                    return "please check spell id"
                elseif check == false then
                    return "spell is already existed"
                else
                    return true
                end
            end ,
            confirm = function(info, v)
                if GetSpellInfo(v) ~= nil then
                    return format("|T%s:16|t %s", GetSpellTexture(v), GetSpellInfo(v))
                end
            end ,
        },
    }
end


function setDBoptions()
    mainOption.args.iconOption.args.profiles = LibStub("AceDBOptions-3.0"):GetOptionsTable(aceDB)
end

function updateCustomSpellConfig()
    insertClassSpells("Custom",CustomSpellList())
end

function insertClassConfig()
    local _,_,ID = UnitClass("player")

    if ID == 1 then
        insertWarriorConfig(mainOption)
        insertClassSpells("Warrior", WarriorSpells )
        insertClassSpells("Arms",ArmsSpells)
        insertClassSpells("Fury",FurySpells)
        insertClassSpells("Protection",WarriorProtectionSpells)
        insertClassSpells("PVP",WarriorPVPSpells)
    elseif ID == 2 then
        insertPaladinConfig(mainOption)
        insertClassSpells("Paladin", PaladinSpells )
        insertClassSpells("Holy", PaladinHolySpells)
        insertClassSpells("Protection", PaladinProtectionSpells)
        insertClassSpells("Retribution",RetributionSpells)
        insertClassSpells("PVP",PaladinPVPSpells)
    elseif ID == 3 then
        insertHunterConfig(mainOption)
        insertClassSpells("Hunter",HunterSpells)
        insertClassSpells("BeastMastery",BeastMasterySpells)
        insertClassSpells("Marksmanship",MarksmanshipSpells)
        insertClassSpells("Survival",SurvivalSpells)
        insertClassSpells("PVP",HunterPVPSpells)
    elseif ID == 4 then
        insertRogueConfig(mainOption)
        insertClassSpells("Rogue", RogueSpells)
        insertClassSpells("Assassination", AssassinationSpells)
        insertClassSpells("Outlaw", OutlawSpells)
        insertClassSpells("Subtlety", SubtletySpells)
        insertClassSpells("PVP", RoguePVPSpells)
    elseif ID == 5 then
        insertPriestConfig(mainOption)
        insertClassSpells("Priest", PriestSpells)
        insertClassSpells("Discipline",DisciplineSpells)
        insertClassSpells("Holy", PriestHolySpells)
        insertClassSpells("Shadow",ShadowSpells)
        insertClassSpells("PVP",PriestPVPSpells)
    elseif ID == 6 then
        insertDeathKnightConfig(mainOption)
        insertClassSpells("DeathKnight", DeathKnightSpells )
        insertClassSpells("Blood", BloodSpells )
        insertClassSpells("Frost", DeathKnightFrostSpells )
        insertClassSpells("Unholy", UnholySpells )
        insertClassSpells("PVP",DeathKnightPVPSpells)
    elseif ID == 7 then
        insertShamanConfig(mainOption)
        insertClassSpells("Shaman", ShamanSpells )
        insertClassSpells("Elemental", ElementalSpells )
        insertClassSpells("Enhancement", EnhancementSpells )
        insertClassSpells("Restoration", ShamanRestorationSpells )
        insertClassSpells("PVP",ShamanPVPSpells)
    elseif ID == 8 then
        insertMageConfig(mainOption)
        insertClassSpells("Mage", MageSpells )
        insertClassSpells("Arcane", ArcaneSpells )
        insertClassSpells("Fire", FireSpells )
        insertClassSpells("Frost", MageFrostSpells )
        insertClassSpells("PVP",MagePVPSpells)
    elseif ID == 9 then
        insertWarlockConfig(mainOption)
        insertClassSpells("Warlock", WarlockSpells )
        insertClassSpells("Affliction", AfflictionSpells )
        insertClassSpells("Demonology", DemonologySpells )
        insertClassSpells("Destruction", DestructionSpells )
        insertClassSpells("PVP",WarlockPVPSpells)
    elseif ID == 10 then
        insertMonkConfig(mainOption)
        insertClassSpells("Monk", MonkSpells )
        insertClassSpells("Brewmaster", BrewmasterSpells )
        insertClassSpells("Mistweaver", MistweaverSpells )
        insertClassSpells("Windwalker", WindwalkerSpells )
        insertClassSpells("PVP",MonkPVPSpells)
    elseif ID == 11 then
        insertDruidConfig(mainOption)
        insertClassSpells("Druid", DruidSpells )
        insertClassSpells("Balance", BalanceSpells )
        insertClassSpells("Feral", FeralSpells )
        insertClassSpells("Restoration", DruidRestorationSpells)
        insertClassSpells("Guardian", GuardianSpells )
        insertClassSpells("PVP",DruidPVPSpells)


    elseif ID == 12 then
        insertDemonHunterConfig(mainOption)
        insertClassSpells("DemonHunter", DemonHunterSpells )
        insertClassSpells("Havoc",HavocSpells)
        insertClassSpells("Vengeance",VengeanceSpells)
        insertClassSpells("PVP",DemonHunterPVPSpells)
    elseif ID == 13 then
        insertEvokerConfig(mainOption)
        insertClassSpells("Evoker", EvokerSpells )
        insertClassSpells("Devastation",DevastationSpells)
        insertClassSpells("Preservation",PreservationSpells)
        insertClassSpells("PVP",EvokerPVPSpells)
    end
    insertClassSpells("Common",CommonSpells)
    insertClassSpells("Bloodlust",Bloodlust)
    updateCustomSpellConfig()
end

media:Register("font","BIG_BOLD",[[Interface\AddOns\PersonalBuff\font\BIG_BOLD.TTF]],255 )
media:Register("statusbar","Flat_N",[[Interface\AddOns\PersonalBuff\texture\nameplate.blp]],255 )
SetupOptions()

insertClassConfig()


