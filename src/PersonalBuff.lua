---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kira1101.
--- DateTime: 2020/9/10 下午 12:46
---

local BuffIcons,eventFrame
local enabledSpell
local updateTicker,updateTracker
local playerInfo = { }
local iconSize,iconSpacing
local media = LibStub("LibSharedMedia-3.0")
local XOffset = 0
local YOffset = 0
local enableAuraTable = {}
local showNameplateNumber
local buffFrame


local function iconEnable(spellID)
    for _,i in ipairs(enabledSpell) do
        if i == spellID then
            return true
        end
    end
    return false
end


function RankCompare(a,b)
    return a.Rank > b.Rank
end

local function getEnableAuraTable(aura)
    if iconEnable(aura[10]) then
        for _,i in ipairs(enableAuraTable) do
            if i[10] == aura[10] then
                return
            end
        end
        aura.Rank = aceDB.char.spellRank[aura[10]]
        table.insert(enableAuraTable,aura)
    end
end

local function updateAura()
    enableAuraTable = {}
    enableAuraTable.alpha = 1

    if C_NamePlate.GetNamePlateForUnit("player", issecure()) ~= nil then
        enableAuraTable.alpha = C_NamePlate.GetNamePlateForUnit("player", issecure()):GetAlpha()
    end

    buffFrame:clear()

    for i=1,40 do
        local Buff = {UnitBuff("player",i)}
        getEnableAuraTable(Buff)
    end

    for i=1,40 do
        local Debuff = {UnitDebuff("player",i)}
        getEnableAuraTable(Debuff)
    end

    for i=1,40 do
        local petBuff = { UnitBuff("pet",i)}
        getEnableAuraTable(petBuff)
    end
    table.sort(enableAuraTable,RankCompare)

    buffFrame:display(enableAuraTable)
end

local function InitializeDB()
    local defaultSettings = {
        char = {
            font = "BIG_BOLD",
            iconSize = 20,
            fontSize = 8,
            countFont = "BIG_BOLD",
            countFontSize = 6,
            iconSpacing = 0,
            XOffset = 0,
            YOffset = 0,
            customTexture = true,
            barTexture = "Flat_N",
            enabledSpell = {
                ['*'] = true,
                [32223] = false,
                [465] = false,
                [183435] = false,
                [210391] = false,
                [315584] = false,
                [3408] = false,
                [108211] = false,
                [2823] = false,
                [8679] = false,
                [48018] = false,
                [333889] = false,
                [5697] = false,
                [196099] = false,
                [145629] = false,
                [3714] = false,
                [546] = false,
                [292106] = false,
                [974] = false,
                [130] = false,
                [110960] = false,
                [342246] = false,
                [48107] = false,
                [48108] = false,
                [205473] = false,
                [69369] = false,
                [135700] = false,
                [93622] = false,
                [33763] = false,
                [48438] = false,
                [774] = false,
                [16870] = false,
                [48438] = false,
            },
            spellRank = {
                ['*'] = 0,
                [32182] = 15,
                [2825] = 15,
                [80353] = 15,
                [264667] = 15,
                [178207] = 15,
                [230935] = 15,
                [256740] = 15,
                [292686] = 15,
            },
            customSpell = {

            },
            resourceNumber = false,
            resourceNumberType = "Numerical",
            resourceFont = "BIG_BOLD",
            resourceFontSize = 8,
            resourceAlignment = "CENTER",
            changeHealthBarColor = false,
        }
    }
    aceDB = LibStub("AceDB-3.0"):New("PersonalBuffAceDB", defaultSettings)
    setDBoptions()
end

local function hideBlizzardAuras()
    if C_NamePlate.GetNamePlateForUnit("player", issecure()) ~= nil then
        C_NamePlate.GetNamePlateForUnit("player", issecure()).UnitFrame.BuffFrame:Hide()
    end
end

local function setBuffFramePoint()
    if C_NamePlate.GetNamePlateForUnit("player", issecure()) ~= nil then
        buffFrame:SetFramePoint(C_NamePlate.GetNamePlateForUnit("player", issecure()).UnitFrame.BuffFrame)
    end
end

local function loadEnableSpell()
    enabledSpell = {}
    for _,i in ipairs(playerInfo.classSpells) do
        if aceDB.char.enabledSpell[i] == true then
            table.insert(enabledSpell,i)
        end
    end
end

local function addBloodlust()
    for _,i in pairs(Bloodlust) do
        table.insert(playerInfo.classSpells,i)
    end
end

local function addCommonSpells()
    for _,i in pairs(CommonSpells) do
        table.insert(playerInfo.classSpells,i)
    end
end

local function addCustomSpellToTable()
    for _,i in pairs(aceDB.char.customSpell) do
        table.insert(playerInfo.classSpells,i)
    end
end



local function getPlayerInfo()
    local _,_,ID = UnitClass("player")
    if ID == 1 then
        playerInfo.classSpells = shallowcopy(WarriorSpells)
    elseif ID == 2 then
        playerInfo.classSpells = shallowcopy(PaladinSpells)
    elseif ID == 3 then
        playerInfo.classSpells = shallowcopy(HunterSpells)
        addclassSpells(BeastMasterySpells)
        addclassSpells(MarksmanshipSpells)
        addclassSpells(SurvivalSpells)
        addclassSpells(addclassSpells(HunterPVPSpells))
        addclassSpells(HunterLegendary)
    elseif ID == 4 then
        playerInfo.classSpells = shallowcopy(RogueSpells)
        addclassSpells(RogueSpells)
    elseif ID == 5 then
        playerInfo.classSpells = shallowcopy(PriestSpells)
        addclassSpells(DisciplineSpells)
        addclassSpells(HolySpells)
        addclassSpells(ShadowSpells)
        addclassSpells(PriestPVPSpells)
        addclassSpells(PriestLegendary)

    elseif ID == 6 then
        playerInfo.classSpells = shallowcopy(DeathKnightSpells)
    elseif ID == 7 then
        playerInfo.classSpells = shallowcopy(ShamanSpells)
    elseif ID == 8 then
        playerInfo.classSpells = shallowcopy(MageSpells)
    elseif ID == 9 then
        playerInfo.classSpells = shallowcopy(WarlockSpells)
    elseif ID == 10 then
        playerInfo.classSpells = shallowcopy(MonkSpells)
    elseif ID == 11 then
        playerInfo.classSpells = shallowcopy(DruidSpells)
    elseif ID == 12 then
        playerInfo.classSpells = shallowcopy(DemonHunterSpells)
    end
    addCommonSpells()
    addBloodlust()
    addCustomSpellToTable()
end
local original
local function setNameplateBarTexture()
    if aceDB.char.customTexture then
        local barTexture = aceDB.char.barTexture
        local nameplate = C_NamePlate.GetNamePlateForUnit("player", issecure())
        if nameplate then
            if original == nil then
                original = nameplate.UnitFrame.healthBar.barTexture:GetTexture()
            end
            if nameplate.driverFrame and nameplate.driverFrame.classNamePlatePowerBar then
                nameplate.driverFrame.classNamePlatePowerBar.Texture:SetTexture(media.MediaTable.statusbar[barTexture])
            end
            nameplate.UnitFrame.healthBar.barTexture:SetTexture(media.MediaTable.statusbar[barTexture])
        end
    end
end

local function setHealthBarClassColor()
    local nameplate = C_NamePlate.GetNamePlateForUnit("player", issecure())
    local changeHealthBarColor = aceDB.char.changeHealthBarColor
    if changeHealthBarColor~=false and nameplate then
        local _,classFilename = UnitClass("player")
        local r,g,b,a = GetClassColor(classFilename)
        nameplate.UnitFrame.healthBar:SetStatusBarColor(r,g,b,a)
    end
end

local function healthBarReset(nameplateToken)
    local playerNameplate = C_NamePlate.GetNamePlateForUnit("player", issecure())
    if playerNameplate ~=nil and playerNameplate.namePlateUnitToken == nameplateToken then
    elseif original ~= nil then
        local nameplate = C_NamePlate.GetNamePlateForUnit(nameplateToken, issecure())
        nameplate.UnitFrame.healthBar.barTexture:SetTexture(original)
    end
end


local function setNameplateNumber()
    local nameplate = C_NamePlate.GetNamePlateForUnit("player", issecure())

    if showNameplateNumber and nameplate then
        local alpha = nameplate:GetAlpha()
        if healthFrame == nil then
            InitializeHealthNumber(nameplate.UnitFrame.healthBar:GetSize())
        end

        healthFrame:SetAllPoints(nameplate.UnitFrame.healthBar)
        healthFrame:SetAlpha(alpha)
        healthFrame.update()


        if nameplate.driverFrame and nameplate.driverFrame.classNamePlatePowerBar then

            if powerFrame == nil then
                InitializePowerNumber(nameplate.driverFrame.classNamePlatePowerBar:GetSize())
            end

            powerFrame:SetAllPoints(nameplate.driverFrame.classNamePlatePowerBar)
            powerFrame:SetAlpha(alpha)
            powerFrame.update()
        end
    end
end

local function OnUpdate()
    hideBlizzardAuras()
    setBuffFramePoint()
    updateAura()
    setNameplateNumber()
end

local playerNameplateToken
local function getPlayerNameplateToken()
    playerNameplateToken = C_NamePlate.GetNamePlateForUnit("player", issecure()).namePlateUnitToken
end

local function checkResourceNumber()
    showNameplateNumber = aceDB.char.resourceNumber
end

local function namePlateUpdate()

    if  C_NamePlate.GetNamePlateForUnit("player", issecure()) ~= nil and updateTracker == false then
        hideBlizzardAuras()
        getPlayerNameplateToken()
        loadEnableSpell()
        setNameplateBarTexture()
        setHealthBarClassColor()
        checkResourceNumber()
        updateTracker = true
        updateTicker = C_Timer.NewTicker(0.1,OnUpdate)
    end
end

local function initialBuffFrame()
    local IconSetting = {}
    IconSetting.iconSize = aceDB.char.iconSize
    IconSetting.iconSpacing =aceDB.char.iconSpacing
    IconSetting.countFont = media.MediaTable.font[aceDB.char.countFont]
    IconSetting.countFontSize = aceDB.char.countFontSize
    IconSetting.font = media.MediaTable.font[aceDB.char.font]
    IconSetting.fontSize = aceDB.char.fontSize
    IconSetting.XOffset = aceDB.char.XOffset
    IconSetting.YOffset = aceDB.char.YOffset
    local FrameSetting = {}
    FrameSetting.Width = aceDB.char.iconSize * 10
    FrameSetting.Height = aceDB.char.iconSize
    FrameSetting.Spells = playerInfo.classSpells
    FrameSetting.IconSetting = IconSetting

    return CreateBuffFrame(FrameSetting)
end

function adjustmentFont()
    buffFrame.FrameSetting.IconSetting.font = media.MediaTable.font[aceDB.char.font]
    buffFrame.FrameSetting.IconSetting.fontSize = aceDB.char.fontSize
    buffFrame:SetFont()
end

function adjustmentCountFont()
    buffFrame.FrameSetting.IconSetting.countFont = media.MediaTable.font[aceDB.char.countFont]
    buffFrame.FrameSetting.IconSetting.countFontSize = aceDB.char.countFontSize
    buffFrame:SetCountFont()
end

function adjustmentIconSize()
    buffFrame.FrameSetting.IconSetting.iconSize = aceDB.char.iconSize
    buffFrame:SetIconSize()
end

function adjustmentIconSpacing()
    buffFrame.FrameSetting.IconSetting.iconSpacing = aceDB.char.iconSpacing
end

function setXOffset()
    buffFrame.FrameSetting.IconSetting.XOffset = aceDB.char.XOffset
end

function setYOffset()
    buffFrame.FrameSetting.IconSetting.YOffset = aceDB.char.YOffset
end

local function clearResourceNumberFrame()
    if healthFrame ~= nil then
        healthFrame:Hide()
        healthFrame = nil
    end
    if powerFrame ~= nil then
        powerFrame:Hide()
        powerFrame = nil
    end
end

local function EventHandler(self, event,...)
    if event == "PLAYER_ENTERING_WORLD" then
        InitializeDB()
        getPlayerInfo()
        loadEnableSpell()
        buffFrame = initialBuffFrame()
        addCustomSpell()

    elseif event == "NAME_PLATE_UNIT_REMOVED" then
        if  playerNameplateToken == ... then
            buffFrame:clear()
            updateTracker = false
            updateTicker:Cancel()
            playerNameplateToken = nil
            clearResourceNumberFrame()
        end
    elseif event == "NAME_PLATE_UNIT_ADDED" then
        healthBarReset(...)
        namePlateUpdate()
    else
        namePlateUpdate()
    end
end

local function registerAuraEvent()
    eventFrame = CreateFrame("Frame")
    eventFrame:RegisterEvent("NAME_PLATE_UNIT_ADDED")
    eventFrame:RegisterEvent("NAME_PLATE_UNIT_REMOVED")
    eventFrame:RegisterEvent("UNIT_AURA")
    eventFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
    eventFrame:SetScript("OnEvent", EventHandler)
end

function resetBuffFrame()
    buffFrame:clear()
    buffFrame = nil
    getPlayerInfo()
    buffFrame = initialBuffFrame()
end



function shallowcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in pairs(orig) do
            copy[orig_key] = orig_value
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end


function addclassSpells(SpellTable)
    if SpellTable ~= nil then
        for _,i in pairs(SpellTable) do
            local isExist = false
            for _,e in ipairs(playerInfo.classSpells) do
                if i == e then
                    isExist = true
                    break
                end
            end
            if isExist == false then
                table.insert(playerInfo.classSpells,i)
            end

        end
    end
end

registerAuraEvent()
updateTracker = false