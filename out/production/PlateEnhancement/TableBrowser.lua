---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kira1101.
--- DateTime: 2020/9/13 上午 02:27
---

--setAuraIcon(34026,iconsFrame,0)
--setAuraIcon(19574,iconsFrame,1)
--local icon1Frame = CreateFrame("Frame","SpellIcons",iconsFrame)
--icon1Frame:SetWidth(20)
--icon1Frame:SetHeight(20)
--icon1Frame:SetPoint("LEFT",0,0)
--
--local texture1 = icon1Frame:CreateTexture(nil,"ARTWORK")
--texture1:SetTexture(GetSpellTexture(34026))
--texture1:SetPoint("CENTER")
--texture1:SetSize(20,20)
--
--local icon2Frame = CreateFrame("Frame","SpellIcons",iconsFrame)
--icon2Frame:SetWidth(20)
--icon2Frame:SetHeight(20)
--icon2Frame:SetPoint("LEFT",21,0)
--
--local texture2 = icon2Frame:CreateTexture(nil,"ARTWORK")
--texture2:SetTexture(GetSpellTexture(19574))
--texture2:SetPoint("CENTER")
--texture2:SetSize(20,20)

--local iconFrame = CreateFrame("Frame","SpellIcon",iconsFrame)
--iconFrame:SetWidth(82)
--iconFrame:SetHeight(40)
--iconFrame:SetPoint("LEFT",iconsFrame,"LEFT")
--iconFrame:SetNormalTexture(GetSpellTexture(34026))


--
--local function showTooltip(self, linkData)
--    local linkType = string.split(":", linkData)
--    if linkType == "item"
--            or linkType == "spell"
--            or linkType == "enchant"
--            or linkType == "quest"
--            or linkType == "talent"
--            or linkType == "glyph"
--            or linkType == "unit"
--            or linkType == "achievement" then
--        GameTooltip:SetOwner(self,"ANCHOR_CURSOR")
--        GameTooltip:SetHyperlink(linkData)
--        GameTooltip:Show()
--        print(linkData)
--    end
--end
--
--local function hideTooltip()
--    GameTooltip:Hide()
--end
--
--for i = 1,NUM_CHAT_WINDOWS do
--    local frame = getglobal("ChatFrame"..i)
--    if frame then
--        setOrHookHandler(frame,"OnHyperLinkEnter", showTooltip)
--        setOrHookHandler(frame,"OnHyperLinkLeave", hideTooltip)
--    end
--end
--
--local frame = CreateFrame("Frame")
--
--local function myEventHandler(self, event, msg, sender)
--    print(event,sender,msg)EventHandler
--end
--
--frame:RegisterEvent("CHAT_MSG_WHISPER")
--frame:SetScript("OnEvent", myEventHandler)
--
--local tasks = {}
--
--function SimpleTimingLib_Schedule(time, func, ...)
--    local t = {...}
--    t.func = func
--    t.time = GetTime() + time
--    table.insert(tasks, t)
--end
--
--local function onUpdate()
--    for i = #tasks, 1, -1 do
--        local val = tasks[i]
--        if val.time <= GetTime() then
--            table.remove(tasks, i)
--            val.func(unpack(val))
--        end
--    end
--end
--
--local frame = CreateFrame("Frame")
--frame:SetScript("OnUpdate", onUpdate)
--
--function SimpleTimingLib_Unschedule(func, ...)
--    for i = #tasks, 1, -1 do
--        local val = tasks[i]
--        if val.func == tasks[i] then
--            local matches = true
--            for i = 1,select("#",...) do
--                if select(i, ...) ~= val[i] then
--                    matches = falseRegisterEvent
--                    break
--                end
--            end
--            if matches then
--                table.remove(tasks, i)
--            end
--        end
--    end
--end
--
--local function buggy()
--    SimpleTimingLib_Unschedule(print, "Bar")
--end
--
--
--function SimpleTimingLib_Schedule_test1()
--    SimpleTimingLib_Schedule(1,print,"Foo",1,2,3)
--    SimpleTimingLib_Schedule(1,print,"Foo",4,5,6)
--    SimpleTimingLib_Schedule(1,print,"Bar",7,8,9)
--    SimpleTimingLib_Unschedule(print,"Foo")
--end
--
--function SimpleTimingLib_Schedule_test2()
--    SimpleTimingLib_Schedule(2,print,"Bar",1,2,3)
--    SimpleTimingLib_Schedule(1,buggy)
--end
--mainFrame = nil
--
--local function setOrHookHandler(frame, script, func)
--    if frame:GetScript(script) then
--        frame:HookScript(script, func)
--    else
--        frame:SetScript(script, func)
--    end
--end
--function mainFrameHide()
--    mainFrame:UnregisterEvent("UNIT_AURA")
--    mainFrame:Hide()
--end
--mainFrame:SetWidth(384)
--mainFrame:SetHeight(350)
--mainFrame:SetPoint("CENTER",UIParent,"CENTER")
--mainFrame:SetBackdrop({
--    bgFile = "Interface\\DialogFrame\\UI-DialogBox-Background",
--    edgeFile = "Interface\\Tooltips\\UI-Tooltip-Border",
--    tile = 1,
--    tileSize = 32,
--    edgeSize = 32,
--    insets = { left = 11, right = 12, top = 12, bottom = 11 }
--});
--testButton = CreateFrame("Button",nil,mainFrame,"SecureActionButtonTemplate,UIPanelButtonTemplate")
--testButton:SetPoint("BOTTOM",mainFrame,"BOTTOM",0,0)
--testButton:SetWidth(34)
--testButton:SetHeight(20)
--testButton:SetText("Close")
--testButton:SetScript("OnClick",  mainFrameHide);